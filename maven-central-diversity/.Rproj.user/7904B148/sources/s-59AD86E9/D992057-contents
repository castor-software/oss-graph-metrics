---
title: "R Notebook"
output: html_notebook
---
 
 
# Load packages

```{r}
library("tidyverse")
library("stringr")
library("igraph")
library("poweRlaw")
library("wesanderson")
library("xtable")
library("diverse")
theme_set(theme_bw())

```

# Read data

```{r}

# // artifact -> release date 
# CALL apoc.export.csv.query("MATCH (artifact:Artifact) RETURN artifact.coordinates as artifact, artifact.release_date as release", "/home/cesarsv/Desktop/release_all.csv", {})
release_all <- read.csv("DatasetFinal/release_all.csv")

# // artifactX -> artifactY
# CALL apoc.export.csv.query("MATCH (artifactX:Artifact) - [depends:DEPENDS_ON] -> (artifactY:Artifact) RETURN artifactX.coordinates AS x, artifactY.coordinates AS y", "/home/cesarsv/Desktop/links_all.csv", {})
links_all <- read.csv("DatasetFinal/links_all.csv")

# // pagerank score for each node in the graph
# CALL apoc.export.csv.query("CALL algo.pageRank.stream('Artifact', 'DEPENDS_ON', {iterations:20, dampingFactor:0.85}) YIELD nodeId, score MATCH (node) WHERE id(node) = nodeId RETURN node.coordinates AS artifact, score AS page_rank ORDER BY score DESC", "/home/cesarsv/Desktop/pagerank_all.csv", {})
page_rank <- read.csv("DatasetFinal/pagerank_all.csv")

# // louvain all
# CALL apoc.export.csv.query("CALL algo.louvain.stream('Artifact', 'DEPENDS_ON', {}) YIELD nodeId, community MATCH (node) WHERE id(node) = nodeId RETURN node.coordinates AS artifact, community", "/home/cesarsv/Desktop/louvain_all.csv", {})
louvain <- read.csv("DatasetFinal/louvain_all.csv")

# // betweenness centrality all
# CALL apoc.export.csv.query("CALL algo.betweenness.stream('Artifact','DEPENDS_ON',{direction:'out'}) YIELD nodeId, centrality MATCH (user:Artifact) WHERE id(user) = nodeId RETURN user.coordinates AS artifact, centrality AS betweenness_centrality ORDER BY centrality DESC","/home/cesarsv/Desktop/betweenness_centrality_all.csv", {})
betweenness_centrality <- read.csv("DatasetFinal/betweenness_centrality_all.csv")

# // harmonic centrality all
# CALL apoc.export.csv.query("CALL algo.closeness.harmonic.stream('Artifact', 'DEPENDS_ON') YIELD nodeId, centrality MATCH (node) WHERE id(node) = nodeId RETURN node.coordinates as artifact, centrality AS harmonic_centrality ORDER BY centrality DESC","/home/cesarsv/Desktop/harmonic_centrality_all.csv", {})
harmonic_centrality <- read.csv("DatasetFinal/harmonic_centrality_all.csv") 

# // label propagation all
# CALL apoc.export.csv.query("CALL algo.labelPropagation.stream('Artifact', 'DEPENDS_ON', {direction: "OUTGOING", iterations: 10}) YIELD nodeId, label MATCH (node) WHERE id(node) = nodeId RETURN node.coordinates as artifact, label","/home/cesarsv/Desktop/label_propagation.csv", {})
label_propagation <- read.csv("DatasetFinal/label_propagation.csv")

# // union find all
# CALL apoc.export.csv.query("CALL algo.unionFind.stream('Artifact', 'DEPENDS_ON', {}) YIELD nodeId, setId MATCH (artifact:Artifact) WHERE id(artifact) = nodeId RETURN artifact.coordinates AS artifact, setId AS union_find","/home/cesarsv/Desktop/union_find.csv", {})
union_find <- read.csv("DatasetFinal/union_find.csv")

# // direct usages
# CALL apoc.export.csv.query("MATCH (n)-[r:DEPENDS_ON]->(artifact) RETURN artifact.coordinates AS artifact, count(n) as direct_usages ORDER BY direct_usages DESC","/home/cesarsv/Desktop/direct_usages.csv", {})
direct_usages <- read.csv("DatasetFinal/direct_usages.csv")

# // direct dependencies
# CALL apoc.export.csv.query("MATCH (n)<-[r:DEPENDS_ON]-(artifact) RETURN artifact.coordinates AS artifact, count(r) as direct_dependencies ORDER BY direct_dependencies DESC","/home/cesarsv/Desktop/direct_dependencies.csv", {})
direct_dependencies <- read.csv("DatasetFinal/direct_dependencies.csv")

# // transitive usages all
# CALL apoc.export.csv.query("MATCH (artifactX:Artifact)<-[*..10000]-(artifactY:Artifact) RETURN artifactX.coordinates AS artifact, count(artifactY) as transitive_usages ORDER BY transitive_usages DESC","/home/cesarsv/Desktop/trans_usages.csv", {})
trans_usages <- read.csv("DatasetFinal/trans_usages.csv")

```

# Process data

```{r}
# merge the data
a <- dplyr::full_join(page_rank, louvain, by = "artifact")
b <- dplyr::full_join(a, betweenness_centrality, by = "artifact")
c <- dplyr::full_join(b, harmonic_centrality, by = "artifact")
d <- dplyr::full_join(c, label_propagation, by = "artifact")
e <- dplyr::full_join(d, direct_usages, by = "artifact")
f <- dplyr::full_join(e, union_find, by = "artifact")
# g <- dplyr::full_join(f, trans_usages, by = "artifact")
# g <- dplyr::full_join(f, direct_usages, by = "artifact")

h <- dplyr::full_join(f, direct_dependencies, by = "artifact")
i <- dplyr::full_join(h, release_all, by = "artifact")

# replace NAs
i$direct_usages <- i$direct_usages %>% replace_na(0)
# i$transitive_usages <- i$transitive_usages %>% replace_na(0)
i$direct_dependencies <- i$direct_dependencies %>% replace_na(0)

final_join <- i

# split artifact into GroupId, ArtifactId and Version
data <- cbind(as.data.frame(stringr::str_split_fixed(final_join$artifact, ":", 3)), 
              final_join$page_rank, 
              final_join$community,
              final_join$betweenness_centrality,
              final_join$harmonic_centrality,
              final_join$label, 
              final_join$direct_usages, 
              final_join$union_find,
              # final_join$transitive_usages,
              final_join$direct_dependencies,
              final_join$release
              )

# type cast release to Date 
data$`final_join$release` <- as.Date(format(as.Date(str_sub(data$`final_join$release`, 1, 10)),'%Y-%m-%d'), '%Y-%m-%d')

# rename columns
data <- data %>% dplyr::rename(
  GroupId = V1,
  ArtifactId = V2,
  Version = V3,
  Release = `final_join$release`,
  PageRank = `final_join$page_rank`,
  Dependencies = `final_join$direct_dependencies`,
  DUsages = `final_join$direct_usages`,
  # TUsages = `final_join$transitive_usages`,
  Louvain = `final_join$community`,
  BetwCentrality = `final_join$betweenness_centrality`,
  HarmCentrality = `final_join$harmonic_centrality`,
  UnionFind = `final_join$union_find`,
  LabelProp = `final_join$label`
  )

# cluster variables to factors
data$UnionFind <- as.factor(data$UnionFind )
summary(data$UnionFind)

```


```{r}
ddata <- data
ddata$Artifact <- paste(data$GroupId, data$ArtifactId, sep = ":")
ddata <- ddata %>% 
  select(Artifact, Version, DUsages)

cat("number of unique artifacts A is", nrow(distinct(ddata, Artifact)), "if we don't consider the version")

```

Distribution of versions for each artifact ((ordered from the artifact that exists in the most versions,
to the least))

```{r}
dplot <- ddata %>% 
  select(Artifact) %>% 
  group_by(Artifact) %>% 
  summarise(Versions = n())

ddata$Artifact <- as.factor(ddata$Artifact)


dplot$Artifact <- factor(dplot$Artifact, levels = dplot$Artifact[order(dplot$Versions, decreasing = T)])
dplot %>%
  filter(Versions > 1000) %>% 
  ggplot(aes(Artifact, Versions)) + 
  geom_point() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```

































